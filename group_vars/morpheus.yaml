---

target_os: debian #proxmox
hostname_morpheus: morpheus
hostname_cartman: "{{ hostname_morpheus }}" #todo fix
main_username: alex

# grog.package
package_list:
  - name: bash-completion
  - name: curl
  - name: dnsutils
  - name: fio
  - name: git
  - name: hddtemp
  - name: htop
  - name: ffmpeg
  - name: iftop
  - name: intel-gpu-tools
  - name: iotop
  - name: ipmitool
  - name: lm-sensors
  - name: mc
  - name: mergerfs
  - name: molly-guard
  - name: mutt
  - name: ncdu
  - name: net-tools
  - name: nut
  - name: nut-client
  - name: nut-server
  - name: nfs-kernel-server
  - name: nmap
  - name: nvme-cli
  - name: openssh-server
  #- name: open-vm-tools #vmware
  - name: python3
  - name: python-setuptools
  #- name: qemu-guest-agent
  #- name: sanoid
  - name: screen
  #- name: ssh-import-id
  - name: smartmontools
  - name: sudo
  - name: tmux
  - name: tree
  - name: wget
  #- name: wireguard-tools
  - name: xfsprogs
  - name: zfsutils-linux

## snapraid
snapraid_config_excludes:
  - "*.unrecoverable"
  - "/tmp/"
  - "/lost+found/"
  - "downloads/"
  - "appdata/"
  - "/mnt/disk7/umbrel/"
  - "*.!sync"
  - ".AppleDouble"
  - "._AppleDouble"
  - ".DS_Store"
  - "._.DS_Store"
  - ".Thumbs.db"
  - ".fseventsd"
  - ".Spotlight-V100"
  - ".TemporaryItems"
  - ".Trashes"
  - ".AppleDB"
  - ".nfo"

## telegraf
telegraf_influxdb_bucket: morpheus
telegraf_influxdb_token: "{{ morpheus_influx_token }}"
telegraf_plugins_base:
  - name: mem
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
      collect_cpu_time: "false"
      report_active: "false"
  - name: disk
    options:
      ignore_fs:
        - "tmpfs"
        - "devtmpfs"
        - "devfs"
      mountpoints:
        - "/"
        - "/mnt/disk1"
        - "/mnt/disk2"
        - "/mnt/disk3"
        - "/mnt/disk4"
        - "/mnt/disk5"
        - "/mnt/disk6"
        - "/mnt/disk7"
        - "/mnt/parity1"
        - "/mnt/storage"
        - "/mnt/tank"
        - "/mnt/jbod"
  - name: diskio
    options:
      skip_serial_number: "true"
  - name: kernel
  - name: processes
  - name: docker
    options:
      endpoint: "unix:///var/run/docker.sock"
      perdevice: "true"
  - name: hddtemp
  - name: net
    options:
      interfaces:
        - "eno1"
        - "vmbr0"
  - name: zfs
    options:
      poolMetrics: true
      datasetMetrics: true

# ktz-sanoid
sanoid_build_from_source: true
sanoid_config_source: sanoid-morpheus.conf
syncoid_cloud_dataset: "demo:tank/appdata"
syncoid_hc_url: "curl -fsS -m 10 --retry 5 -o /dev/null https://hc.{{ domain_cloud }}/ping"
syncoid_cron_jobs:
  ## cloud to morpheus
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_cloud }}/start && {{ syncoid_binary_path }} -r --skip-parent {{ syncoid_cloud_dataset }} tank/backups/cloud | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_cloud }} --data-binary "@-"', name: 'cloud_replication', weekday: '*', hour: '*/6' }

  ## morpheus to pennywise data
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_audiobooks }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/audiobooks p:z2/morpheus/tank/fuse/audiobooks | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_audiobooks }} --data-binary "@-"', name: 'morpheus to pennywise audiobooks', weekday: '*', hour: '1' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_documents }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/documents p:z2/morpheus/tank/fuse/documents | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_documents }} --data-binary "@-"', name: 'morpheus to pennywise documents', weekday: '*', hour: '3' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_drone }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/drone p:z2/morpheus/tank/fuse/drone | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_drone }} --data-binary "@-"', name: 'morpheus to pennywise drone', weekday: '*', hour: '4',  }
  #- { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_music }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/music p:z2/morpheus/tank/fuse/music | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_music }} --data-binary "@-"', name: 'morpheus to pennywise music', weekday: '*', hour: '5' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_photos }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/photos p:z2/morpheus/tank/fuse/photos | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_photos }} --data-binary "@-"', name: 'morpheus to pennywise photos', weekday: '*', hour: '6' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_podcast }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/podcast p:z2/morpheus/tank/fuse/podcast | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_podcast }} --data-binary "@-"', name: 'morpheus to pennywise podcast', weekday: '*', hour: '7' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_software }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/software p:z2/morpheus/tank/fuse/software | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_software }} --data-binary "@-"', name: 'morpheus to pennywise software', weekday: '*', hour: '8' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_sports }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/sports p:z2/morpheus/tank/fuse/sports | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_sports }} --data-binary "@-"', name: 'morpheus to pennywise sports', weekday: '*', hour: '9' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_videos }}/start && {{ syncoid_binary_path }} --source-bwlimit=1M tank/fuse/videos p:z2/morpheus/tank/fuse/videos | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_videos }} --data-binary "@-"', name: 'morpheus to pennywise videos', weekday: '*', hour: '10' }

  ## morpheus to pennywise docker appdata
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_appdata }}/start && {{ syncoid_binary_path }} -r --skip-parent --exclude influxdb --source-bwlimit=2M nvme2tb/appdata p:z2/morpheus/backups/appdata | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_appdata }} --data-binary "@-"', name: 'morpheus to pennywise appdata', weekday: '*', hour: '11' }
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_backups }}/start && {{ syncoid_binary_path }} -r --source-bwlimit=2M --no-sync-snap tank/backups p:z2/morpheus/tank/backups | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_pen_backups }} --data-binary "@-"', name: 'morpheus to pennywise backups', weekday: '*', hour: '12' }

  ## morpheus local jobs
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_plexmeta }}/start && /usr/bin/docker run --name plexmetamanager --rm -v /mnt/nvme2tb/appdata/plexmeta/config:/config meisnate12/plex-meta-manager --run | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_plexmeta }} --data-binary "@-"', name: 'plexmeta', weekday: '*/1' }
  - { job: 'docker restart plextraktsync', name: 'plextraktsync', weekday: '*12' }

  ## morpheus to elrond jobs
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_elr_autorestic }}/start && /usr/local/bin/autorestic backup -av -c /root/.autorestic.yml | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_elr_autorestic  }} --data-binary "@-"', name: 'morpheus to elrond - autorestic', weekday: '*', hour: '13' }

# geerlingguy.nfs
nfs_exports: [ "/mnt/storage/proxmox    *(rw,sync,no_root_squash,fsid=25)"]

# ironicbadger.snapraid
snapraid_bin_path: /usr/local/bin/snapraid
snapraid_runner_cron_jobs:
  - { job: '{{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_snapraid }}/start && {{ snapraid_runner_command }} | {{ syncoid_hc_url }}/{{ syncoid_hc_uuid_mor_snapraid }} --data-binary "@-"', name: 'snapraid_runner', weekday: '*', hour: '01' }

# ktz-autorestic
simple_autorestic_decrypt: true

autorestic_locations:
  - name: audiobooks
    from: /mnt/tank/fuse/audiobooks
    to: 
      - morpheus-audiobooks
autorestic_backends:
  - name: "{{ elrond_minio_bucket_audiobooks | selectattr('name', 'defined') | map(attribute='name') }}"
    type: s3
    path: "https://minio.el.gg.{{ domain_me }}/morpheus-audiobooks"
    key: some-random-password-198rc79r8y1029c8yfewj8f1u0ef87yh198uoieufy
    env:
      - "AWS_ACCESS_KEY_ID: elrondkey"
      - "AWS_SECRET_ACCESS_KEY: elrondkey"


      #docker_users: "{{ users|selectattr('docker', 'defined')|map(attribute='username') }}"


# ironicbadger.bash-aliases (formerly ferrarimarco.bash-aliases)
bash_aliases:
  - { alias: "dtail", command: "docker logs -tf --tail='50' " }
  - { alias: "dstop", command: "docker stop `docker ps -aq`" }
  - { alias: "drm", command: "docker rm `docker ps -aq`" }
  - { alias: "dcp", command: "docker-compose -f ~/docker-compose.yml "}
  - { alias: "dcporph", command: "docker-compose -f ~/docker-compose.yml up -d --remove-orphans" }
  - { alias: "dprune", command: "docker image prune" }
  - { alias: "dprunesys", command: "docker system prune --all" }
  - { alias: "dtop", command: "docker run --name ctop  -it --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop" }
  - { alias: "appdata", command: "cd /mnt/nvme2tb/appdata" }
  - { alias: "zspace", command: "zfs list -o space" }
  - { alias: "zsnap", command: "zfs list -o space | sort -k4 --human-numeric-sort" }
  - { alias: "dfclean", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4 | sort -k 6" }
  - { alias: "dffull", command: "df -h -x tmpfs -t fuse.mergerfs -t xfs -t ext4 -t zfs" }
  - { alias: "hdtemp", command: "sudo hddtemp -q /dev/sd[a,b,c,d,e,f,g,h,i,j,k,l,m,n]" }
  - { alias: "nvmetemp", command: "for i in {0..3}; do nvme smart-log /dev/nvme'$i'n1 | grep temperature; done;" }
  - { alias: "itop", command: "sudo intel_gpu_top" }

# ktz-cartman
docker_zfs_override: true
morpheus_main_storage_path: /mnt/storage
extra_mountpoints:
  - { path: "{{ morpheus_main_storage_path }}" }
  #- { path: /opt, diskbyid: "UUID=cbf30089-2d57-4e83-ad62-763992d0f57a", fs: ext4, opts: "defaults,discard" }
  #- { path: /opt/appdata, diskbyid: "UUID=06c5ccf6-6fd8-4f2a-8213-81107f034c4e", fs: ext4, opts: "defaults,discard" }

# ironicbadger.snapraid
snapraid_runner: true
snapraid_parity_disks:
  - { path: /mnt/parity1, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_Y6GX1KWC-part1, fs: ext4, opts: defaults, content: false }

snapraid_data_disks:
  - { path: /mnt/disk1, diskbyid: /dev/disk/by-id/ata-WDC_WD120EDAZ-11F3RA0_5PJJ0K4F-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_Y6GE3JJC-part1, fs: xfs, opts: defaults, content: true }
  - { path: /mnt/disk3, diskbyid: /dev/disk/by-id/ata-WDC_WD120EDAZ-11F3RA0_5PK9EAHE-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk4, diskbyid: /dev/disk/by-id/ata-WDC_WD120EMAZ-11BLFA0_5PGENVSD-part1, fs: xfs, opts: defaults, content: true }
  #- { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_16G1016Z-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk5, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B2DA2_3HG7TJ8N-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD140EDGZ-11B1PA0_9LJ8JJ8G-part1, fs: xfs, opts: defaults, content: false }
  - { path: /mnt/disk7, diskbyid: /dev/disk/by-id/ata-ST10000DM0004-2GR11L_ZJV5CF96-part1, fs: xfs, opts: defaults, content: false }

# retired_disks:
  # disk6 replaced may 21st 2022 - failure. sent back to WDC under warranty.
  #- { path: /mnt/disk6, diskbyid: /dev/disk/by-id/ata-WDC_WD120EDAZ-11F3RA0_5PJHZW1F-part1, fs: xfs, opts: defaults, content: false }
  # parity upgraded nov 11th 2021 - 12tb to 14tb. 12tb moved to disk6
  #- { path: /mnt/parity1, diskbyid: /dev/disk/by-id/ata-WDC_WD120EDAZ-11F3RA0_5PJHZW1F-part1, fs: ext4, opts: defaults, content: false }
  # disk2 replaced nov 11th 2021 - 8tb to 14tb
  #- { path: /mnt/disk2, diskbyid: /dev/disk/by-id/ata-HGST_HDN728080ALE604_R6GPPDTY-part1, fs: ext4, opts: defaults, content: true }
  # disk4 replaced nov 11th 2021 - 10tb to 12tb
  #- { path: /mnt/disk4, diskbyid: /dev/disk/by-id/ata-WDC_WD100EMAZ-00WJTA0_2YJ2S3AD-part1, fs: xfs, opts: defaults, content: false }

zfs_disks:
  # replaced WDC_WD100EMAZ-00WJTA0_2YJ7E2VD with WDC_WUH721414ALE604_Z2GJ4V4T ## dec 12th 22
  # replaced ST10000NE0008-2JM101_ZPW0N45T with WD140EFGX-68B0GN0_9LJSSYVG ## dec 4th 22
  # ata-ST10000DM0004-2GR11L_ZJV5CF96 ## failed june 2021
  # ata-ST10000NE0008-2JM101_ZPW0N45T ## installed june 2021
  # ata-WDC_WD100EMAZ-00WJTA0_2YJ7E2VD
  # zpool replace tank /dev/disk/by-id/ata-ST10000DM0004-2GR11L_ZJV5CF96 /dev/disk/by-id/ata-ST10000NE0008-2JM101_ZPW0N45T

  ## nvme zfs mirror
  # nvme-eui.00000000000000108ce38e02000e543f-part1 -> ../../nvme1n1p1
  # nvme-eui.00000000000000108ce38e02000e5450-part1 -> ../../nvme0n1p1


fstab_mergerfs:
  - { source: "/mnt/disk*:/mnt/tank/fuse", mountpoint: "/mnt/storage", fs: fuse.mergerfs, opts: "defaults,nonempty,allow_other,use_ino,moveonenospc=true,category.create=epmfs,dropcacheonclose=true,minfreespace=250G,fsname=mergerfs" }  
  - { source: "/mnt/disk*", mountpoint: "/mnt/jbod", fs: fuse.mergerfs, opts: "defaults,nonempty,allow_other,use_ino,moveonenospc=true,category.create=mspmfs,dropcacheonclose=true,minfreespace=250G,fsname=jbod" }  

snapraid_runner_email_address: "{{ gmail_address }}"
snapraid_runner_gmail_pass: "{{ snapraid_email_password }}"
snapraid_sync_healthcheck_io_uuid: "{{ snapraid_healthcheck_secret }}"

# ktz-traefik
traefik_file_provider: true
traefik_enable_dashboard: true #defaults to false
traefik_insecure_transport: true #defaults to false
traefik_exposed_by_default: true

## ktz-authelia
authelia_users:
  - username: "{{ authelia_username }}"
    displayname: "{{ authelia_displayname }}"
    # docker run authelia/authelia:latest authelia hash-password 'yourpassword'
    password: "{{ authelia_password }}"
    email: "{{ gmail_address }}"
    groups:
      - admin
      - dev
authelia_rules:
  - domain: "*.m.{{ local_domain }}"
    policy: bypass
    resources:
      - '^/api.*$'
  - domain: "*.m.{{ local_domain }}"
    policy: one_factor
  - domain: "plex.{{ domain_me }}"
    policy: one_factor
  - domain: "wiki.m.wd.{{ domain_me }}"
    policy: one_factor
  - domain: "nc.{{ domain_cloud }}"
    policy: bypass


# ironicbadger.docker_compose_generator
appdata_path: /mnt/nvme2tb/appdata
download_path: /mnt/ssd1tb/downloads
storage_path: /mnt/storage
local_domain: "wd.{{ domain_me }}"

containers:
  ###
  - service_name: tr
    active: true
    image: traefik
    ports:
      - 80:80
      - 443:443
      #- 8080:8080
    extra_hosts:
      - host.docker.internal:172.17.0.1
    environment:
      - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
      - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    volumes:
      - "{{ appdata_path }}/short/traefik:/etc/traefik"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    restart: unless-stopped
  ###
  - service_name: authelia
    active: false
    image: authelia/authelia
    labels:
      - "traefik.http.routers.authelia.rule=Host(`login.m.{{ local_domain }}`)"
      - traefik.http.routers.authelia.tls=true
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.m.{{ local_domain }}/"
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email
    volumes:
      - "{{ appdata_path }}/short/authelia:/config"
    expose:
    restart: unless-stopped
  - service_name: redis
    active: true
    image: redis
    restart: unless-stopped
  ###
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    devices:
      - /dev/dri:/dev/dri
    labels:
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.m.{{ local_domain }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    volumes:
      - "{{ appdata_path }}/mediaservers/jellyfin:/config"
      - "{{ morpheus_main_storage_path }}:/data:ro"
      # ram transcode
      - /dev/shm:/transcode
    environment:
      - "JELLYFIN_PublishedServerUrl=jellyfin.m.{{ local_domain }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: plex
    active: true
    image: plexinc/pms-docker
    network_mode: host
    devices:
      - /dev/dri:/dev/dri
    labels:
      - "traefik.http.routers.plex.rule=Host(`plex.{{ domain_me }}`)"
      - traefik.http.services.plex.loadbalancer.server.port=32400
    volumes:
      - "{{ appdata_path }}/mediaservers/plex/config:/config"
      - "{{ appdata_path }}/mediaservers/plex/transcode:/transcode"
      - "{{ morpheus_main_storage_path }}:/data:ro"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: plexmeta
    active: true
    image: meisnate12/plex-meta-manager
    depends_on:
      - plex
    volumes:
      - "{{ appdata_path }}/mediaservers/plexmeta/config:/config"
    labels:
      - traefik.enable=false
    environment:
      - TZ=America/New_York
      - PMM_TIME=01:22
    restart: unless-stopped
  ###
  - service_name: plextraktsync
    active: true
    image: ghcr.io/taxel/plextraktsync
    depends_on:
      - plex
    volumes:
      - "{{ appdata_path }}/mediaservers/plextraktsync/config:/app/config"
    labels:
      - traefik.enable=false
    restart: unless-stopped
###
  - service_name: tautulli
    active: true
    image: lscr.io/linuxserver/tautulli
    depends_on:
      - plex
    labels:
      - "traefik.http.routers.tautulli.rule=Host(`tautulli.m.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/mediaservers/tautulli:/config"
      - "{{ appdata_path }}/mediaservers/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: prowlarr
    active: true
    image: lscr.io/linuxserver/prowlarr:develop
    labels:
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.m.{{ local_domain }}`)"
      #- traefik.http.routers.prowlarr.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/arrmatey/prowlarr:/config"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: nzbget
    active: true
    image: lscr.io/linuxserver/nzbget
    labels:
      - "traefik.http.routers.nzbget.rule=Host(`nzbget.m.{{ local_domain }}`)"
      #- traefik.http.routers.nzbget.middlewares=authelia@docker
      - "traefik.http.routers.nzbgetapi.rule=Host(`nzbgetapi.m.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/arrmatey/nzbget/config:/config"
      - "{{ download_path }}:/downloads"
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: sonarr
    active: true
    image: lscr.io/linuxserver/sonarr
    depends_on:
      - nzbget
    labels:
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.m.{{ local_domain }}`)"
      #- traefik.http.routers.sonarr.middlewares=authelia@docker
    volumes:
      - "{{ appdata_path }}/arrmatey/sonarr:/config"
      - "{{ download_path }}/complete/tv:/downloads/complete/tv"
      - /mnt/jbod/tv:/tv
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: radarr
    active: true
    image: lscr.io/linuxserver/radarr
    volumes:
      - "{{ appdata_path }}/arrmatey/radarr:/config"
      - "{{ download_path }}/complete/movies:/downloads/complete/movies"
      - /mnt/jbod/movies:/movies
    labels:
      - "traefik.http.routers.radarr.rule=Host(`radarr.m.{{ local_domain }}`)"
      #- traefik.http.routers.radarr.middlewares=authelia@docker
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: lidarr
    active: false
    image: lscr.io/linuxserver/lidarr
    volumes:
      - "{{ appdata_path }}/arrmatey/lidarr:/config"
      - "{{ download_path }}/complete/music:/downloads/complete/music"
      - "{{ download_path }}/intermediate/music:/downloads-amd"
      - /mnt/storage/flac/flac:/music
    labels:
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.m.{{ local_domain }}`)"
      #- traefik.http.routers.lidarr.middlewares=authelia@docker
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: nextcloud
    active: true
    image: nextcloud:26
    devices:
      - /dev/dri:/dev/dri
    depends_on:
      - mysql
    labels:
      - "traefik.http.routers.nc.rule=Host(`nc.{{ domain_cloud }}`)"
    volumes:
      - "{{ appdata_path }}/long/nextcloud:/var/www/html"
    restart: unless-stopped
  ###
  - service_name: mysql
    active: true
    image: mariadb
    ports:
      - 3306:3306
    environment:
      - "MYSQL_ROOT_PASSWORD={{ container_mysql_root_password }}"
      - "MYSQL_PASSWORD={{ container_mysql_password }}"
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
    volumes:
      - "{{ appdata_path }}/databases/mysql:/var/lib/mysql"
    restart: unless-stopped
  ###
  - service_name: smokeping
    active: true
    image: lscr.io/linuxserver/smokeping
    hostname: morpheus
    volumes:
      - "{{ appdata_path }}/databases/smokeping/config:/config"
      - "{{ appdata_path }}/databases/smokeping/data:/data"
    labels:
      - "traefik.http.routers.smokeping.rule=Host(`smokeping.m.{{ local_domain }}`)"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: gitea
    active: true
    image: gitea/gitea
    depends_on:
      - mysql
    environment:
      - "USER_UID={{ main_uid }}"
      - "USER_GID={{ main_gid }}"
      - "ROOT_URL=https://git.{{ domain_me }}"
      - "SSH_DOMAIN=git.{{ domain_me }}"
      - "APP_NAME=git.{{ domain_me }}"
      - "SSH_PORT=2222"
      - "DISABLE_REGISTRATION=true"
      - "REQUIRE_SIGNIN_VIEW=true"
      - TZ=America/New_York
      - "ALLOWED_HOST_LIST=drone.m.wd.ktz.me"
    volumes:
      - "{{ appdata_path }}/long/gitea:/data"
    labels:
      - "traefik.http.routers.git.rule=Host(`git.{{ domain_me }}`)"
      - traefik.http.services.git.loadbalancer.server.port=3000
    ports:
      - '"2222:2222"'
    restart: unless-stopped
  ###
  - service_name: drone
    active: true
    image: drone/drone:latest
    volumes:
      - "{{ appdata_path }}/short/drone:/data"
    environment:
      - "DRONE_GITEA_SERVER=https://git.{{ domain_me }}/"
      - DRONE_GIT_ALWAYS_AUTH=true
      - "DRONE_GITEA_CLIENT_ID={{ drone_gitea_client_id }}"
      - "DRONE_GITEA_CLIENT_SECRET={{ drone_gitea_client_secret }}"
      - "DRONE_SERVER_HOST=drone.m.{{ local_domain }}"
      - DRONE_SERVER_PROTO=https
      - "DRONE_RPC_SECRET={{ drone_gitea_webhook_secret }}"
      - "DRONE_USER_CREATE=username:alexktz,admin:true"
      - DRONE_LOGS_DEBUG=true
      - TZ=America/New_York
    labels:
      - "traefik.http.routers.drone.rule=Host(`drone.m.{{ local_domain }}`)"
    ports:
      - "3001:80"
    restart: unless-stopped
  - service_name: drone-runner-docker
    active: true
    image: drone/drone-runner-docker:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=https
      - "DRONE_RPC_HOST=drone.m.{{ local_domain }}"
      - "DRONE_RPC_SECRET={{ drone_gitea_webhook_secret }}"
      - DRONE_RUNNER_CAPACITY=2
      - "DRONE_RUNNER_NAME={{ hostname_morpheus }}"
    ports: 
      - 3002:3000
    depends_on:
      - drone
    restart: unless-stopped
  ###
  - service_name: sync
    active: false
    image: lscr.io/linuxserver/resilio-sync
    hostname: "{{ hostname_morpheus }}"
    volumes:
      - "{{ appdata_path }}/short/sync:/config"
      #- "{{ morpheus_main_storage_path }}:/sync" # make the scope smaller
    labels:
      - "traefik.http.routers.btsync.rule=Host(`sync.m.{{ local_domain }}`)"
    ports:
      - "55555:55555"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: librespeed
    active: true
    image: lscr.io/linuxserver/librespeed
    ports:
      - 8008:80
    labels:
      - "traefik.http.routers.librespeed.rule=Host(`speedtest.m.{{ local_domain }}`)"
    environment:
      - MODE=standalone
      - TELEMETRY=true
      - "PASSWORD={{ librespeed_password }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: lychee
    active: true
    image: lycheeorg/lychee
    labels:
      - "traefik.http.routers.lychee.rule=Host(`gallery.m.{{ local_domain }}`)"
    depends_on:
      - mysql
    volumes:
      - "{{ appdata_path }}/long/lychee/config:/config"
      - "{{ appdata_path }}/long/lychee/uploads:/uploads"
      - "{{ appdata_path }}/long/lychee/sym:/sym"
    environment:
      - PHP_TZ=America/New_York
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=lychee
      - DB_DATABASE=lychee
      - "DB_PASSWORD={{ container_mysql_password }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: ninja_nginx
    active: true
    image: nginx:mainline-alpine
    labels:
      - "traefik.http.routers.ninja.rule=Host(`ninja.m.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/long/invoiceninja/ninja.conf:/etc/nginx/conf.d/default.conf:ro"
      - "{{ appdata_path }}/long/invoiceninja/storage:/var/www/app/storage"
      - "{{ appdata_path }}/long/invoiceninja/public/logo:/var/www/app/logo"
      - "{{ appdata_path }}/long/invoiceninja/public:/var/www/app/public"
    restart: unless-stopped
  ###
  - service_name: invoiceninja
    active: true
    image: invoiceninja/invoiceninja:4.5.18
    depends_on:
      - mysql
    volumes:
      - "{{ appdata_path }}/long/invoiceninja/storage:/var/www/app/storage"
      - "{{ appdata_path }}/long/invoiceninja/public/logo:/var/www/app/logo"
      - "{{ appdata_path }}/long/invoiceninja/public:/var/www/app/public"
    environment:
      - MYSQL_DATABASE=ninja
      - "MYSQL_ROOT_PASSWORD={{ container_mysql_password}}"
      - APP_DEBUG=0
      - "APP_URL={{ invoice_ninja_app_url }}"
      - "APP_KEY={{ invoice_ninja_app_key }}"
      - APP_CIPHER=AES-256-CBC
      - DB_USERNAME=root
      - "DB_PASSWORD={{ container_mysql_password}}"
      - DB_HOST=mysql
      - DB_DATABASE=ninja
      - MAIL_HOST=smtp.gmail.com
      - "MAIL_USERNAME={{ gmail_address }}"
      - "MAIL_PASSWORD={{ invoice_ninja_gmail_app_password }}"
      - MAIL_DRIVER=smtp
      - MAIL_FROM_NAME="Alex K"
      - "MAIL_FROM_ADDRESS={{ gmail_address }}"
      - REQUIRE_HTTPS=true
      - "TRUSTED_PROXIES='*'"
    restart: unless-stopped
  ###
  - service_name: paperless
    active: true
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    labels:
      - "traefik.http.routers.paperless.rule=Host(`paperless.m.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/long/paperless/config:/config"
      - "{{ appdata_path }}/long/paperless/data:/data"
    environment:
      - PAPERLESS_CONSUMER_RECURSIVE=true
      - PAPERLESS_CONSUMER_SUBDIRS_AS_TAGS=true
      - PAPERLESS_URL=https://paperless.m.{{ local_domain }}
      - PAPERLESS_REDIS=redis://redis
    include_global_env_vars: true
    restart: unless-stopped
###
  - service_name: mealie
    active: true
    image: hkotel/mealie:v0.5.1
    labels:
      - traefik.http.routers.mealie.rule=Host(`mealie.m.{{ local_domain }}`)
    environment:
      - DB_TYPE=sqlite
    volumes:
      - "{{ appdata_path }}/short/mealie:/app/data"
    restart: unless-stopped  
  ###
  - service_name: dozzle
    active: true
    image: amir20/dozzle
    labels:
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.m.{{ local_domain }}`)"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  ###
  - service_name: changedetect
    active: true
    image: dgtlmoon/changedetection.io
    labels:
      - "traefik.http.routers.change.rule=Host(`change.m.{{ local_domain }}`)"
      - traefik.http.services.change.loadbalancer.server.port=5000
    volumes:
      - "{{ appdata_path }}/databases/changedetect:/datastore"
    restart: unless-stopped
  ###
  - service_name: abs
    active: true
    image: advplyr/audiobookshelf
    labels:
      - "traefik.http.routers.audiobookshelf.rule=Host(`abs.m.{{ local_domain }}`)"
    volumes:
      - "{{ morpheus_main_storage_path }}/audiobooks/library:/audiobooks:ro"
      - "{{ morpheus_main_storage_path }}/audiobooks/library2:/audiobooks2:ro"
      - "{{ morpheus_main_storage_path }}/audiobooks/podcasts:/podcasts"
      - "{{ appdata_path }}/mediaservers/audiobookshelf/metadata:/metadata"
      - "{{ appdata_path }}/mediaservers/audiobookshelf/config:/config"
    restart: unless-stopped
  ###
  - service_name: filebrowser
    active: false
    image: filebrowser/filebrowser:s6
    labels:
      - "traefik.http.routers.fb.rule=Host(`files.m.{{ local_domain }}`)"
    volumes:
      - "{{ morpheus_main_storage_path }}:/srv"
      - "{{ appdata_path }}/short/filebrowser/db:/database.db"
      - "{{ appdata_path }}/short/filebrowser/filebrowser.json:/.filebrowser.json"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: overseerr
    active: true
    image: sctx/overseerr:latest
    labels:
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.m.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/arrmatey/overseerr:/app/config"
    restart: unless-stopped
  ###
  - service_name: tdarr
    active: true
    image: haveagitgat/tdarr
    labels:
      - traefik.enable=true
      - "traefik.http.routers.tdarr.rule=Host(`tdarr.m.{{ local_domain }}`)"
    volumes:
      - "{{ appdata_path }}/arrmatey/tdarr/transcode:/temp"
      - "{{ appdata_path }}/arrmatey/tdarr/server:/app/server"
      - "{{ appdata_path }}/arrmatey/tdarr/configs:/app/configs"
      - "{{ appdata_path }}/arrmatey/tdarr/logs:/app/logs"
      - "{{ morpheus_main_storage_path }}:/mnt/storage"
    environment:
      - "serverIP=192.168.1.10"
      - "serverPort=8266"
      - "webUIPort=8265"
    ports:
      - 8265:8265
      - 8266:8266
      - 8267:8267
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: tdarr-node
    active: true
    image: haveagitgat/tdarr_node
    devices:
      - /dev/dri:/dev/dri
    network_mode: service:tdarr
    volumes:
      - "{{ appdata_path }}/arrmatey/tdarr/configs:/app/configs"
      - "{{ appdata_path }}/arrmatey/tdarr/logs:/app/logs"
      - "{{ morpheus_main_storage_path }}:/mnt/storage"
    environment:
      - "nodeID=morpheusQSV"
      - "nodeIP=10.42.1.10"
      - "nodePort=8267"
      - "serverIP=10.42.1.10"
      - "serverPort=8266"
    include_global_env_vars: true
    restart: unless-stopped


  # template for docker-compose services
  #
  ###
  # - service_name:
  #   active: false
  #   image:
  #   container_name: #optional - only required if diff to service_name
  #   labels:
  #     - traefik.enable=true
  #     - "traefik.http.routers.XXXXXXXX.rule=Host(`abs.m.{{ local_domain }}`)"
  #     #- traefik.http.routers.XXXXXXX.entrypoints=websecure
  #     #- traefik.http.routers.XXXXXXX.tls.certresolver=cloudflare
  #     - traefik.http.services.XXXXXXX.loadbalancer.server.port=80
  #     #- traefik.http.routers.XXXXXXX.middlewares=authelia@docker
  #   volumes:
  #     - "{{ appdata_path }}/app:/config"
  #   environment:
  #     -
  #   include_global_env_vars: #optional - defaults to false
  #   restart: unless-stopped
