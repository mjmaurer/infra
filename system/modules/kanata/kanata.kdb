(defcfg
  process-unmapped-keys yes
  log-layer-changes no
  linux-continue-if-no-devs-found yes)

;; ------------------------------------- Testing ------------------------------------ #

;; (Script: kanload / kanunload)
;; sudo launchctl unload /Library/LaunchDaemons/org.nixos.kanata_daemons.plist
;; In Alacritty (VSCode works for config sanity check): 
;; (Script: kanrun / kankill)
;; sudo kanata --debug -c ~/infra/system/modules/kanata/kanata.kdb
;; It might help to comment out 'log-layer-changes' as well

;; ------------------------------------- Source ------------------------------------ #
;; Key names here
;; https://github.com/jtroo/kanata/blob/main/parser/src/keys/mod.rs#L350


(platform (macos)
  (defvar
    ;; lfar  fn   ;; NOTE: Not sure if you can actually map fn to anything (in any keyboard)
    lout  lctl
    lmid  lalt
    linr  lmet

    rinr  rmet
    rmid  ralt
    rout  rctl ;; Doesn't actually exist on mac, but does on UHK
    rfar  apps ;; Doesn't actually exist on mac, but does on UHK
  )
)

;; Could base this off envar in the future
(platform (linux win winiov2 wintercept)
  ;; Typical windows keyboard:
  ;; _   ctl  met  alt            spc            alt  met  apps ctrl 

  (defvar
    ;; lfar  fn 
    lout  lctl
    lmid  lmet
    linr  lalt

    rinr  ralt
    rmid  rmet
    rout  apps
    rfar  rctl
  )
)


;; Arbitrarily arrange src as mac keyboard layout
;; 'met' == Windows / Command / Super 
(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft      up  down
       lctl lalt lmet           spc            rmet ralt apps rctl left rght
)

;; ------------------------------------- Default ------------------------------------ #

;; The goal is to have all keyboards at least share the following modifier order (relative to space):
;;                  lmet lctl @hyp    spc    ralt(@arr) rctl

(deflayermap (default)
  caps  esc

  ;; Modifiers
  ;; $lfar fn
  $lout lmet
  $lmid lctl
  $linr @hyp

  $rinr @raltarr
  $rmid rctl
  $rout rmet
  ;; $rfar fn

  ;; Layers
  f     @f
  d     @d
  ;     @;
  /     @/
  tab   @tab
)
;; ---------------------------- Alt[tab] / Arrow Layer ------------------------------------ #

(deflayermap (alt-arrow)
  tab  @alttab

  h    @lft
  j    @dwn
  k    @up
  l    @rgt
)

;; --------------------- Semicolon Layer (Parens and Left-side S-Num) ------------------------------------ #

;; Don't add anything here you want to hold down
(deflayermap (semicolon)
  ;; Right Side 
  ;   ;   ;; ;

  ;; Right Side Top Row
  u   S-[ ;; {
  i   S-] ;; }

  ;; Right Side Home Row
  h   [   ;; [
  j   S-9 ;; (
  k   S-0 ;; )
  l   ]   ;; ]

  ;; Left Side Top Row
  e   S-[ ;; {
  r   S-] ;; }

  ;; Left Side Home Row
  s   [   ;; [
  d   S-9 ;; (
  f   S-0 ;; )
  g   ]   ;; ]

  ;; Left Side Bottom Row
  x   S-2 ;; @
  c   S-3 ;; #
  v   S-4 ;; $
  b   S-5 ;; %
)

;; ---------------------------- Tab Layer (Symbols) ------------------------------------ #

;; Don't map f so we can still use number layer
(deflayermap (tab)

  tab tab

  r   S-; ;; :

  ;; Right Side Top Row
  y   S-6 ;; ^ 
  u   S-7 ;; & 
  i   S-\ ;; | 
  o   S-1 ;; !
  p   S-` ;; ~

  ;; Right Side Home Row
  h   S-= ;; + 
  j   -   ;; -
  k   S-- ;; underscore
  l   =   ;; =
  ;   S-5 ;; %
  '   `   ;; `

  ;; Right Side Bottom Row
  n   S-8 ;; *
  m   /   ;; /
  ,   S-, ;; <
  .   S-. ;; >
  /   \   ;; \
)

(deflayermap (number)
  u   7 
  i   8
  o   9
  j   4
  k   5
  l   6
  m   1
  ,   2
  .   3
  /   0
  h   0
  ;   0
  n   0
)

;; -------------------------------- Aliases ------------------------------------ #

(defvar
  arrkey       ralt
  hypkey1      lmet
  hypkey2      lctl
  hypkeys      ($hypkey1 $hypkey2)
  syskeys      ($hypkey1 $hypkey2 $arrkey)
  tap-timeout  200
  hold-time    250
)

;; NOTE: tap-timeout helps with holding down the tap key (i.e. for OS-level repeating)
;; If it's 200 and you tap the tap key of 'a', holding 'a' again within 200ms will result in a hold of 'a'.
(defalias
  ;; Hyper Key (lalt -> lmet lctl)
  hyp (multi $hypkey1 $hypkey2)
  end-hyp (multi (release-key $hypkey1) (release-key $hypkey2))

  ;; Alt / Arrow Layer
  raltarr (multi $arrkey (layer-while-held alt-arrow))
  rgt     (unmod ($arrkey) rght)
  lft     (unmod ($arrkey) left)
      ;; page if hyp keys active. could maybe use defoverrides instead
  dwn     (fork (unmod ($arrkey) down) (unmod $syskeys pgdn) $hypkeys)
  up      (fork (unmod ($arrkey) up)   (unmod $syskeys pgup) $hypkeys)

  ;; tab mode (Using vim keys in default layer for nav)
  tabmode  (multi tab (layer-switch default) (release-layer alt-arrow)) 
  alttab  (fork (unmod tab) @tabmode $hypkeys)

  ;; Number Layer
  f       (tap-hold-release $tap-timeout $hold-time f (layer-while-held number))

  ;; Tab Layer
  tab     (fork (one-shot-press 1000 (layer-while-held tab)) tab (rsft))

  ;; Semicolon (paren and left S-num) Layer
  d       (tap-hold-release $tap-timeout $hold-time d (layer-while-held semicolon))
  ;       (tap-hold-release $tap-timeout $hold-time ; (layer-while-held semicolon))
  /       (tap-hold-release $tap-timeout $hold-time / rmet)
  ;; semitap (tap-hold 0 300 (one-shot-press 1000 (layer-while-held semicolon)) rmet)
  ;; ;       (fork @semitap ; (lsft lctl lmet lalt ralt))
)

;; -------------------------------- Notes ------------------------------------ #

;; 'multi' - For hyper-key logic where modifiers should continue to be held.
;; 'chord' - For pressing modifiers and keys all at once. 

;; defcfg notes
;; transparent-key-resolution to-base-layer
;;macos-dev-names-exclude (
;; "UHK 60 v2"
;;)
;; This theoretically woudl be helpful, but I found
;; it was using the default layer (instead of defsrc) anyway.
;; You can test by trying the homerow scroll action in arrow layer
;; delegate-to-first-layer yes
